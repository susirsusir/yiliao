package com.yl.yiliao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yl.yiliao.model.database.MessageItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ITEM".
*/
public class MessageItemDao extends AbstractDao<MessageItem, Long> {

    public static final String TABLENAME = "MESSAGE_ITEM";

    /**
     * Properties of entity MessageItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property N_id = new Property(0, Long.class, "n_id", true, "_id");
        public final static Property Create_at = new Property(1, String.class, "create_at", false, "CREATE_AT");
        public final static Property Txt_content = new Property(2, String.class, "txt_content", false, "TXT_CONTENT");
        public final static Property ReceivePhone = new Property(3, String.class, "receivePhone", false, "RECEIVE_PHONE");
        public final static Property SendPhone = new Property(4, String.class, "sendPhone", false, "SEND_PHONE");
        public final static Property SendName = new Property(5, String.class, "sendName", false, "SEND_NAME");
        public final static Property SendAvatar = new Property(6, String.class, "sendAvatar", false, "SEND_AVATAR");
        public final static Property Count = new Property(7, int.class, "count", false, "COUNT");
    }


    public MessageItemDao(DaoConfig config) {
        super(config);
    }
    
    public MessageItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: n_id
                "\"CREATE_AT\" TEXT," + // 1: create_at
                "\"TXT_CONTENT\" TEXT," + // 2: txt_content
                "\"RECEIVE_PHONE\" TEXT," + // 3: receivePhone
                "\"SEND_PHONE\" TEXT," + // 4: sendPhone
                "\"SEND_NAME\" TEXT," + // 5: sendName
                "\"SEND_AVATAR\" TEXT," + // 6: sendAvatar
                "\"COUNT\" INTEGER NOT NULL );"); // 7: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageItem entity) {
        stmt.clearBindings();
 
        Long n_id = entity.getN_id();
        if (n_id != null) {
            stmt.bindLong(1, n_id);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(2, create_at);
        }
 
        String txt_content = entity.getTxt_content();
        if (txt_content != null) {
            stmt.bindString(3, txt_content);
        }
 
        String receivePhone = entity.getReceivePhone();
        if (receivePhone != null) {
            stmt.bindString(4, receivePhone);
        }
 
        String sendPhone = entity.getSendPhone();
        if (sendPhone != null) {
            stmt.bindString(5, sendPhone);
        }
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(6, sendName);
        }
 
        String sendAvatar = entity.getSendAvatar();
        if (sendAvatar != null) {
            stmt.bindString(7, sendAvatar);
        }
        stmt.bindLong(8, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageItem entity) {
        stmt.clearBindings();
 
        Long n_id = entity.getN_id();
        if (n_id != null) {
            stmt.bindLong(1, n_id);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(2, create_at);
        }
 
        String txt_content = entity.getTxt_content();
        if (txt_content != null) {
            stmt.bindString(3, txt_content);
        }
 
        String receivePhone = entity.getReceivePhone();
        if (receivePhone != null) {
            stmt.bindString(4, receivePhone);
        }
 
        String sendPhone = entity.getSendPhone();
        if (sendPhone != null) {
            stmt.bindString(5, sendPhone);
        }
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(6, sendName);
        }
 
        String sendAvatar = entity.getSendAvatar();
        if (sendAvatar != null) {
            stmt.bindString(7, sendAvatar);
        }
        stmt.bindLong(8, entity.getCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageItem readEntity(Cursor cursor, int offset) {
        MessageItem entity = new MessageItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // n_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // create_at
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // txt_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // receivePhone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sendName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sendAvatar
            cursor.getInt(offset + 7) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageItem entity, int offset) {
        entity.setN_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_at(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTxt_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReceivePhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSendAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCount(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageItem entity, long rowId) {
        entity.setN_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageItem entity) {
        if(entity != null) {
            return entity.getN_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageItem entity) {
        return entity.getN_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
